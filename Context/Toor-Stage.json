{
  "openapi": "3.0.0",
  "tags": [
    {
      "name": "organizer"
    },
    {
      "name": "stage"
    },
    {
      "name": "organizer_stages"
    },
    {
      "name": "structure_api"
    }
  ],
  "info": {
    "title": "Stages",
    "termsOfService": "https:\/\/developer.toornament.com\/terms-guidelines",
    "version": "2.1.0",
    "description": "The Toornament platform connects your website and application with the eSports tournaments around the world.",
    "contact": {
      "name": "Toornament Developer",
      "url": "https:\/\/developer.toornament.com",
      "email": "contact@toornament.com"
    }
  },
  "servers": [
    {
      "url": "https:\/\/api.toornament.com\/organizer\/v2"
    }
  ],
  "paths": {
    "\/stages": {
      "get": {
        "tags": [
          "organizer_stages"
        ],
        "summary": "Retrieve all stages of a tournament.",
        "description": "Returns all stages of a tournament with basic information and settings.",
        "parameters": [
          {
            "$ref": "#\/components\/parameters\/stageRange"
          },
          {
            "$ref": "#\/components\/parameters\/tournamentIds"
          }
        ],
        "responses": {
          "200": {
            "description": "Stages retrieved",
            "content": {
              "application\/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/components\/schemas\/StageFully"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": [],
            "oAuth2": [
              "organizer:result",
              "organizer:admin"
            ]
          }
        ]
      }
    },
    "\/stages\/{id}": {
      "get": {
        "tags": [
          "organizer_stages"
        ],
        "summary": "Retrieve a single stage.",
        "description": "Returns a stage with the given id with basic information and settings.",
        "parameters": [
          {
            "$ref": "#\/components\/parameters\/stageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Stage retrieved",
            "content": {
              "application\/json": {
                "schema": {
                  "$ref": "#\/components\/schemas\/StageFully"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": [],
            "oAuth2": [
              "organizer:result",
              "organizer:admin"
            ]
          }
        ]
      }
    },
    "\/tournaments\/{tournament_id}\/stages": {
      "get": {
        "deprecated": true,
        "tags": [
          "organizer_stages"
        ],
        "summary": "Retrieve all stages of a tournament.",
        "description": "Returns all stages of a tournament with basic information and settings.",
        "parameters": [
          {
            "$ref": "#\/components\/parameters\/tournamentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Stages retrieved",
            "content": {
              "application\/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#\/components\/schemas\/StageLegacy"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": [],
            "oAuth2": [
              "organizer:result"
            ]
          }
        ]
      }
    },
    "\/tournaments\/{tournament_id}\/stages\/{id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "organizer_stages"
        ],
        "summary": "Retrieve a single stage of a tournament.",
        "description": "Returns a stage with the given id with basic information and settings.",
        "parameters": [
          {
            "$ref": "#\/components\/parameters\/tournamentId"
          },
          {
            "$ref": "#\/components\/parameters\/stageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Stage retrieved.",
            "content": {
              "application\/json": {
                "schema": {
                  "$ref": "#\/components\/schemas\/StageLegacy"
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKey": [],
            "oAuth2": [
              "organizer:result"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "name": "X-Api-Key",
        "in": "header"
      },
      "oAuth2": {
        "type": "oauth2",
        "description": "Access token with \u0027organizer:result\u0027 and \u0027organizer:admin\u0027 scope (see (Authorization)[https:\/\/developer.toornament.com\/v2\/security\/authorization])",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https:\/\/api.toornament.com\/oauth\/v2\/token",
            "scopes": {
              "organizer:result": "Grants the ability to edit match information and referee results.",
              "organizer:admin": "Grants the ability to create a tournament and edit its settings."
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https:\/\/account.toornament.com\/oauth2\/authorize",
            "tokenUrl": "https:\/\/api.toornament.com\/oauth\/v2\/token",
            "scopes": {
              "organizer:result": "Grants the ability to edit match information and referee results.",
              "organizer:admin": "Grants the ability to create a tournament and edit its settings."
            }
          }
        }
      }
    },
    "parameters": {
      "stageRange": {
        "name": "Range",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "example": "stages=0-49"
        },
        "description": "A range of requested items using the \u0027stages\u0027 unit. The size of the range can not exceed 50. (see [Pagination](https:\/\/developer.toornament.com\/v2\/overview\/pagination))"
      },
      "tournamentId": {
        "name": "tournament_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The id of the tournament you want to retrieve data about."
      },
      "stageId": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The id of the stage."
      },
      "tournamentIds": {
        "name": "tournament_ids",
        "in": "query",
        "required": false,
        "explode": false,
        "style": "form",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "378426939508809728,534138941862841533"
        },
        "description": "Only return stages for the given list of tournaments."
      }
    },
    "schemas": {
      "StageBase": {
        "properties": {
          "number": {
            "description": "A number used for ordering stages.",
            "type": "integer",
            "example": 2
          },
          "name": {
            "description": "The name of the stage.",
            "type": "string",
            "maxLength": 30,
            "example": "Playoffs"
          },
          "settings": {
            "description": "Settings that describe the various options for the stage type (see [Stages](https:\/\/developer.toornament.com\/v2\/core-concepts\/stages)).",
            "type": "object",
            "example": {
              "size": 16,
              "grand_final": "simple",
              "threshold": 0,
              "skip_round1": false
            }
          }
        }
      },
      "StageBaseReadonly": {
        "properties": {
          "type": {
            "description": "The type of stage that defines how the stage functions (see [Stages](https:\/\/developer.toornament.com\/v2\/core-concepts\/stages)).",
            "type": "string",
            "enum": [
              "single_elimination",
              "double_elimination",
              "bracket_groups",
              "custom_bracket",
              "pools",
              "gauntlet",
              "league",
              "swiss",
              "simple",
              "ffa_single_elimination",
              "ffa_bracket_groups",
              "ffa_custom_bracket",
              "ffa_league"
            ],
            "example": "double_elimination"
          }
        }
      },
      "StageBaseSettings": {
        "properties": {
          "match_settings": {
            "description": "Settings that define the match configuration used in the stage.",
            "type": "object",
            "example": {
              "format": {
                "type": "best_of",
                "options": {
                  "nb_match_sets": 3
                }
              }
            }
          },
          "auto_placement_enabled": {
            "description": "If enabled, participants will automatically be placed in the stage using their creation order as seeding.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "StageBaseShort": {
        "properties": {
          "tournament_id": {
            "description": "The id of the tournament.",
            "type": "string",
            "example": "378426939508809728"
          }
        }
      },
      "StageBaseComplete": {
        "properties": {
          "id": {
            "description": "The id of the stage.",
            "type": "string",
            "example": "618983668512789184"
          },
          "status": {
            "description": "The status of the stage.",
            "type": "string",
            "enum": [
              "pending",
              "ready",
              "running",
              "completed"
            ],
            "example": "pending"
          },
          "closed": {
            "description": "Whether the stage is closed.",
            "type": "boolean",
            "example": false
          }
        }
      },
      "StageLegacy": {
        "allOf": [
          {
            "$ref": "#\/components\/schemas\/StageBase"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseReadonly"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseComplete"
          },
          {
            "type": "object",
            "required": [
              "id",
              "number",
              "name",
              "type",
              "closed",
              "settings"
            ]
          }
        ]
      },
      "StageFully": {
        "allOf": [
          {
            "$ref": "#\/components\/schemas\/StageBase"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseReadonly"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseSettings"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseShort"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseComplete"
          },
          {
            "type": "object",
            "required": [
              "id",
              "tournament_id",
              "number",
              "name",
              "type",
              "status",
              "closed",
              "settings",
              "match_settings",
              "auto_placement_enabled"
            ]
          }
        ]
      },
      "StageCreate": {
        "allOf": [
          {
            "$ref": "#\/components\/schemas\/StageBase"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseReadonly"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseSettings"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseShort"
          },
          {
            "type": "object",
            "required": [
              "tournament_id",
              "number",
              "name",
              "type",
              "settings"
            ]
          }
        ]
      },
      "StageUpdate": {
        "allOf": [
          {
            "$ref": "#\/components\/schemas\/StageBase"
          },
          {
            "$ref": "#\/components\/schemas\/StageBaseSettings"
          }
        ]
      }
    }
  }
}